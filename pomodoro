#!/usr/bin/env python3

"""
Simple Pomodoro app inspired by https://github.com/rkashapov/i3blocks-pomodoro
The app designed to be used with i3blocks.
"""

import os
import sys
import json
from typing import Dict, List, Any, Optional
from dataclasses import dataclass
from pathlib import Path
import datetime
from subprocess import call
from time import sleep

STATE_FILE = '/tmp/i3blocks_pomodoro.state'



class Cycle:
    def __init__(self, items):
        self._items = items
        self._iter = None
        self.reset()

    def reset(self):
        self._iter = cycle(self._items)

    def __iter__(self):
        return self

    def __next__(self):
        return next(self._iter)


class Pomodoro:
    def __init__(self, cycle):
        self._cycle = cycle
        self._state = "Paused"
        self._remaining = 0
        self._do_reset = False
        self._running = False

    @property
    def state(self):
        state = self._state
        if not self._running:
            state = "Paused"
        minutes, seconds = divmod(self._remaining, 60)
        return "{0} {1:02d}:{2:02d}".format(state, minutes, seconds)

    def toggle(self):
        self._running = not self._running

    def reset(self):
        self._do_reset = True
        self._cycle.reset()

    def start(self):
        for timeout, state, message in self._cycle:
            if self._do_reset:
                self._do_reset = False

            if self._running:
                self._state = state
                notify(message)

            self._remaining = timeout * 60
            while self._remaining:
                if self._do_reset:
                    break
                sleep(1)
                if self._running:
                    self._remaining -= 1
                    self._state = state


def emit(full_text, short_text, color, background=None, flush=True):
    d = {
        'full_text': full_text,
        'short_text': short_text,
        'color': color,
    }
    if background:
        d['background'] = background
    print(json.dumps(d), flush=flush)

def err(text):
    print(text, file=sys.stderr, flush=False)


def notify(text):
    call(["notify-send", "Pomodoro", text])


@dataclass
class State:
    created: int
    stage: int = 0

    def update_from_json(self, path: Path):
        if isinstance(path, str):
            path = Path(path)
        if path.is_file():
            self.__dict__.update(json.loads(path.read_text()))

    def to_json(self, path: Path):
        if isinstance(path, str):
            path = Path(path)
        path.write_text(json.dumps(self.__dict__, indent=4))


def _now() -> int:
    return int(datetime.datetime.now().timestamp())


@dataclass
class Stage:
    minutes: int
    name: str
    message: str
    seconds_left: int = 0

    @property
    def seconds(self):
        return self.minutes * 60


@dataclass
class Work(Stage):
    minutes: int = 25
    name: str = 'work'
    message: str = 'Time to work!'


@dataclass
class ShortBreak(Stage):
    minutes: int = 5
    name: str = 'short_break'
    message: str = 'Take a short break!'


@dataclass
class LongBreak(Stage):
    minutes: int = 15
    name: str = 'long_break'
    message: str = 'Take a long break!'


@dataclass
class Pomo:
    start_timestamp: int
    state_fp: str = STATE_FILE
    stages: List[Stage] = (
        Work,
        ShortBreak,
        Work,
        LongBreak,
    )

    @property
    def button(self) -> Optional[int]:
        but = os.getenv("BLOCK_BUTTON", "").lower()
        return int(but) if but else None

    def run(self):
        # datetime from Unix timestamp
        start_time = datetime.datetime.fromtimestamp(int(self.start_timestamp))
        start_str = start_time.strftime("%H:%M")

        # Restore state from JSON
        state = State(
            created=_now(),
            stage=0,
        )
        # state.update_from_json(self.state_fp)

        while True:
            stage = self.stages[state.stage]()
            since_created = _now() - state.created

            breakpoint()
            # for i, stage in enumerate(cycle(self.stages)):
            #     if since_created < stage.seconds:
            #         state.stage = i
            #         break

            minutes, seconds = divmod(self._remaining, 60)
            message = "{0} {1:02d}:{2:02d}".format(state, minutes, seconds)

            emit(message, 'short_text', '#FF8000')
            sleep(1)


def main(start_timestamp: str, state_fp: str = STATE_FILE):
    runner = Pomo(
        start_timestamp=int(start_timestamp),
        state_fp = state_fp
    )
    runner.run()


if __name__ == "__main__":
    # main(*sys.argv[1:])
    main(_now())