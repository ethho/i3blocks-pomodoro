#!/usr/bin/env python3

"""
Simple Pomodoro app inspired by https://github.com/rkashapov/i3blocks-pomodoro
The app designed to be used with i3blocks.
"""

import os
import sys
import json
from typing import Dict, List, Any, Optional
from dataclasses import dataclass, field
from pathlib import Path
import datetime
from subprocess import call, check_output
from time import sleep

STATE_FILE = '/tmp/i3blocks_pomodoro.state'


def emit(full_text, short_text, color, background=None, flush=True):
    d = {
        'full_text': full_text,
        'short_text': short_text,
        'color': color,
    }
    if background:
        d['background'] = background
    print(json.dumps(d), flush=flush)


def err(text):
    print(text, file=sys.stderr, flush=False)


def notify(text):
    call(["notify-send", "Pomodoro", text])


def _now() -> int:
    return int(datetime.datetime.now().timestamp())


def xrescat(name, default) -> str:
    """In bash: xrescat i3xrocks.value.font "Source Code Pro Medium 13")"""
    return check_output(["xrescat", name, default]).decode("utf-8").strip()


class ColorEnum:
    orange = xrescat("i3xrocks.warning", "#FF8000")
    red = xrescat("i3xrocks.error.color", "#FF0000")
    green = xrescat("gnome.terminal.color2", "#00FF00")
    white = xrescat("i3xrocks.value.color", "#FFFFFF")


@dataclass
class State:
    started: int = field(default_factory=_now)
    stage: int = 0
    since_started: Optional[int] = None

    def update_from_json(self, path: Path):
        if isinstance(path, str):
            path = Path(path)
        if path.is_file():
            self.__dict__.update(json.loads(path.read_text()))

    def to_json(self, path: Path):
        if isinstance(path, str):
            path = Path(path)
        path.write_text(json.dumps(self.__dict__, indent=4))

    @property
    def paused(self) -> bool:
        return self.since_started is not None

    @property
    def stopped(self) -> bool:
        return self.paused and self.since_started <= 0

    def toggle(self):
        if self.paused:
            self.unpause()
        else:
            self.pause()

    def pause(self):
        self.since_started = _now() - self.started

    def unpause(self):
        self.started = _now() - self.since_started
        self.since_started = None

    def reset(self, stage_offset: int = 0):
        self.started = _now()
        self.since_started = None
        self.stage += stage_offset


@dataclass
class Stage:
    minutes: int
    name: str
    message: str
    seconds_left: int = 0
    icon: str = ''
    color: str = ColorEnum.white

    @property
    def seconds(self):
        return self.minutes * 60

    def notify(self):
        notify(self.icon + " " + self.message)


@dataclass
class Work(Stage):
    minutes: int = 25
    name: str = 'Work'
    message: str = 'Time to work!'
    icon: str = ''


@dataclass
class ShortBreak(Stage):
    minutes: int = 5
    name: str = 'Short Break'
    message: str = 'Take a short break!'
    icon: str = ''
    color: str = ColorEnum.green


@dataclass
class LongBreak(Stage):
    minutes: int = 15
    name: str = 'Long Break'
    message: str = 'Take a long break!'
    icon: str = ''
    color: str = ColorEnum.green


@dataclass
class Pomo:
    state: Optional[State] = None
    state_fp: str = STATE_FILE
    stages: List[Stage] = (
        Work,
        ShortBreak,
        Work,
        LongBreak,
    )

    def get_button(self) -> Optional[int]:
        but = os.environ.get('BLOCK_BUTTON', '').strip()
        return int(but) if but else None

    @property
    def stage_idx(self) -> int:
        self.state.stage = self.state.stage % len(self.stages)
        return self.state.stage % len(self.stages)

    def run(self):
        # Restore state from JSON
        if self.state is None:
            self.state = State()
            self.state.update_from_json(self.state_fp)

        # Main event loop
        while True:
            stage = self.stages[self.stage_idx]()
            since_started = self.state.since_started or _now() - self.state.started
            assert since_started >= -1, since_started
            remaining = stage.seconds - 1 - since_started

            # Stage is over
            if remaining <= 0:
                os.environ['BLOCK_BUTTON'] = '1'
                self.state.stage += 1
                self.state.started = _now() + 1
                self.stages[self.stage_idx]().notify()
                continue

            minutes, seconds = divmod(max(0, remaining), 60)
            message = "{0} {1:02d}:{2:02d}".format(stage.icon, minutes, seconds)
            button = self.get_button()
            if button == 1:
                # message = f"{button=}"
                self.state.toggle()
            elif button == 2:
                self.state.reset()
            elif button == 3:
                self.state.reset(stage_offset=1)
            if self.state.stopped:
                color = ColorEnum.red
            elif self.state.paused:
                color = ColorEnum.orange
            else:
                color = stage.color
            emit(message, 'short_text', color)

            self.state.to_json(self.state_fp)
            break


def main(state_fp: str = STATE_FILE):
    runner = Pomo(state_fp=state_fp)
    runner.run()


if __name__ == "__main__":
    main(*sys.argv[1:])